/**
 * HTML Exporter
 */

import type { Project, ExportOptions } from '@/types';

export class HTMLExporter {
  /**
   * Export project to standalone HTML
   */
  static export(project: Project, options: ExportOptions = {}): Blob {
    const html = this.generateHTML(project, options);
    return new Blob([html], { type: 'text/html' });
  }

  /**
   * Generate standalone HTML
   */
  private static generateHTML(project: Project, options: ExportOptions): string {
    const slides = project.slides || [];
    const globalOptions = project.globalOptions || {};

    const slidesHtml = slides
      .map((slide) => {
        const attrs = this.buildSlideAttributes(slide.options || globalOptions);
        const notesHtml =
          slide.notes && options.includeNotes !== false
            ? `<aside class="notes">${this.escapeHtml(slide.notes)}</aside>`
            : '';

        return `<section ${attrs}>${slide.content}${notesHtml}</section>`;
      })
      .join('\n      ');

    const theme = globalOptions.theme || 'black';
    const transition = globalOptions.transition || 'slide';
    const fontSize = globalOptions.fontSize || 16;
    const textAlign = globalOptions.textAlign || 'center';

    return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="generator" content="PresentFlow Pro v2.0">
  <meta name="author" content="${this.escapeHtml(project.metadata?.author as string || '')}">
  <title>${this.escapeHtml(project.name || 'Presentation')}</title>

  <!-- Reveal.js -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/reveal.js/4.5.0/reveal.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/reveal.js/4.5.0/theme/${theme}.min.css">

  <!-- Syntax Highlighting -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">

  <!-- Math Support -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css">

  <style>
    .reveal { font-size: ${fontSize}px; }
    .reveal .slides { text-align: ${textAlign}; }

    /* Custom styles */
    .reveal pre code {
      max-height: 500px;
    }

    .reveal img {
      max-width: 100%;
      max-height: 70vh;
    }

    /* Print styles */
    @media print {
      .reveal .slides {
        width: 100% !important;
        height: 100% !important;
        top: 0 !important;
        left: 0 !important;
      }
    }
  </style>
</head>
<body>
  <div class="reveal">
    <div class="slides">
      ${slidesHtml}
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/reveal.js/4.5.0/reveal.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-typescript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"></script>

  <script>
    // Initialize Reveal.js
    Reveal.initialize({
      controls: true,
      progress: true,
      center: true,
      hash: true,
      transition: '${transition}',
      slideNumber: 'c/t',
      width: 960,
      height: 700,
      margin: 0.04,
      minScale: 0.2,
      maxScale: 2.0,
      keyboard: true,
      overview: true,
      touch: true,
      help: true,
      showNotes: ${options.includeNotes !== false},
      autoPlayMedia: null,
      preloadIframes: null,
    });

    // Syntax highlighting
    document.querySelectorAll('pre code').forEach((block) => {
      if (typeof Prism !== 'undefined') {
        Prism.highlightElement(block);
      }
    });

    // Math rendering
    document.querySelectorAll('.math-block, .math-inline').forEach((el) => {
      const math = el.getAttribute('data-math');
      if (math && typeof katex !== 'undefined') {
        katex.render(math, el, {
          displayMode: el.classList.contains('math-block'),
          throwOnError: false,
        });
      }
    });
  </script>

  <!-- Generated by PresentFlow Pro -->
  <script>
    console.log('ðŸ“Š Presentation by PresentFlow Pro v2.0');
    console.log('ðŸŽ­ Project: ${this.escapeHtml(project.name)}');
    console.log('ðŸ“… Created: ${new Date(project.createdAt).toLocaleDateString()}');
  </script>
</body>
</html>`;
  }

  /**
   * Build slide attributes
   */
  private static buildSlideAttributes(options: any): string {
    const attrs: string[] = [];

    if (options.backgroundColor) {
      attrs.push(`data-background-color="${this.escapeHtml(options.backgroundColor)}"`);
    }

    if (options.backgroundImage) {
      attrs.push(`data-background-image="${this.escapeHtml(options.backgroundImage)}"`);
    }

    if (options.transition) {
      attrs.push(`data-transition="${this.escapeHtml(options.transition)}"`);
    }

    return attrs.join(' ');
  }

  /**
   * Escape HTML
   */
  private static escapeHtml(text: string): string {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
}
